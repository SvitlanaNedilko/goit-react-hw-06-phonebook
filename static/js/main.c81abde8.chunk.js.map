{"version":3,"sources":["redux/contacts/contacts-action.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["contactsAction","addContact","createAction","name","number","payload","id","shortid","generate","onDeleteContact","changeFilter","getVisibleContacts","filter","allContacts","normalizedFilter","toLowerCase","contact","includes","connect","contacts","contactItems","dispatch","contactActions","className","length","map","onClick","state","event","currentTarget","value","type","onChange","onSubmit","useState","setName","setNumber","nameInputId","numberInputId","e","preventDefault","find","alert","htmlFor","pattern","title","required","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","storeExp","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","querySelector"],"mappings":"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","file":"static/js/main.c81abde8.chunk.js","sourcesContent":["import shortid from 'shortid'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nconst addContact = createAction('contacts/Add', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  }\r\n})\r\n\r\nconst onDeleteContact = createAction('contacts/Delete')\r\n\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n\r\nconst contactsAction = { addContact, onDeleteContact, changeFilter }\r\n\r\nexport default contactsAction\r\n","import { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport contactActions from '../../redux/contacts/contacts-action'\r\n\r\nimport './ContactList.scss'\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className=\"ContactList\">\r\n      {!!contacts.length &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li className=\"ContactList_Item\" key={id}>\r\n            <p className=\"ContactList_Name\">{name}</p>\r\n            <p>{number}</p>\r\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst getVisibleContacts = (filter, allContacts) => {\r\n  const normalizedFilter = filter.toLowerCase()\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { filter, contactItems } }) => ({\r\n  contacts: getVisibleContacts(filter, contactItems),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactActions.onDeleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport './Filter.scss'\r\nimport contactActions from '../../redux/contacts/contacts-action'\r\n\r\nconst Filter = ({ filter, changeFilter }) => {\r\n  return (\r\n    <label className=\"Filter_Input\">\r\n      Find contacts by name\r\n      <input type=\"text\" value={filter} onChange={changeFilter} />\r\n    </label>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeFilter: (event) =>\r\n    dispatch(contactActions.changeFilter(event.currentTarget.value)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n\r\nFilter.propTypes = {\r\n  changeFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n}\r\n","import React, { useState } from 'react'\r\nimport shortid from 'shortid'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport contactActions from '../../redux/contacts/contacts-action'\r\nimport './ContactForm.scss'\r\n\r\nfunction ContactForm({ onSubmit, contacts }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const nameInputId = shortid.generate()\r\n  const numberInputId = shortid.generate()\r\n\r\n  const handleInputChangeName = (event) => {\r\n    setName(event.currentTarget.value)\r\n  }\r\n\r\n  const handleInputChangeNumber = (event) => {\r\n    setNumber(event.currentTarget.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const isPresentName = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    )\r\n    if (isPresentName) {\r\n      alert(`${name} is already in contacts`)\r\n    } else {\r\n      onSubmit({ name, number })\r\n      setName('')\r\n      setNumber('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\r\n      <label className=\"ContactForm_Input\" htmlFor={nameInputId}>\r\n        Имя\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChangeName}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <label className=\"ContactForm_Input\" htmlFor={numberInputId}>\r\n        Телефон\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChangeNumber}\r\n          id={numberInputId}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ contacts: state.contacts.contactItems })\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactActions.addContact(contact)),\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n}\r\n","import ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport './App.scss'\n\nfunction App() {\n  return (\n    <div className=\"AppRoot\">\n      <h1 className=\"AppTitle\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"AppTitle\">Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  )\n}\nexport default App\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux'\r\nimport actions from './contacts-action'\r\n\r\nconst contactItems = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.onDeleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n})\r\n\r\nexport default combineReducers({\r\n  contactItems,\r\n  filter,\r\n})\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport contactsReducer from './contacts/contacts-reducer'\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'ContactsList',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n})\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n]\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n})\r\nconst persistor = persistStore(store)\r\nconst storeExp = { store, persistor }\r\n\r\nexport default storeExp\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport './index.scss'\nimport store from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}